---
  - name: Installing OpenStack Cloud
    hosts: localhost
    connection: local 
    tasks:
    - name: Setup directory structure for Faucet
      file:
        path: "{{ faucet_controler_base }}/{{ item }}"
        state: directory
      with_items: 
        - config
        - logs
      tags:
        - pre-reqs

    - name: Create Faucet controll config from template
      template:
        src: faucet.yaml.j2
        dest: "{{ faucet_controler_base }}/config/faucet.yaml"

    - name: Create a data container for faucet
      docker_container:
        name: faucet_data
        image: busybox
        state: started
        recreate: yes 
        volumes:
          - "{{ faucet_controler_base }}/config:/etc/faucet"
          - "{{ faucet_controler_base }}/logs:/var/log/faucet"
        tags:
        - pre-reqs

    - name: Setup Faucet controller (inside docker container)
      docker_container:
        name: faucet
        image: faucet/faucet
        state: started
        recreate: yes
        published_ports:
          - 6653:6653
          - 9302:9302
        volumes_from:
          - faucet_data
      tags:
        - pre-reqs

    - name: Make sure openvswitch is installed
      apt:
        name: openvswitch-switch
        state: present
      become: true
      tags:
        - pre-reqs

    - name: Setup openvswitch data 
      become: true
      ansible.builtin.shell: |
        ovs-vsctl add-br {{ switch_name }} \
          -- set bridge {{ switch_name }} other-config:datapath-id=0000000000000001 \
          -- set-controller {{ switch_name }} tcp:127.0.0.1:6653 \
          -- set controller {{ switch_name }} connection-mode=out-of-band
         
        exit 0
      tags:
        - pre-reqs
         
    - name: Downlad Ubuntu cloud image
      get_url:
        url: "{{ ubuntu_cloud_image }}"
        dest: "{{ playbook_dir }}/sources/focal-server-cloudimg-amd64.img"
        mode: 0755
      register: ubuntu_archive_file
      tags:
        - pre-reqs
    
    - name: Downlad pfSense image
      get_url:
        url: "{{ pfsense_image }}"
        dest: "/tmp/pfSense-amd64.img.gz"
        mode: 0755
      register: pfsense_archive_file
      tags:
        - pre-reqs

    - name: Uncompress and Convert (to qcow2) the pfSense image
      shell: |
        gunzip -k {{ pfsense_archive_file.dest }}
        qemu-img convert -f raw -O qcow2 {{ pfsense_archive_file.dest[:-3] }} {{ playbook_dir }}/sources/{{ pfsense_archive_file.dest[:-3] | basename }}

        exit 0
      tags:
        - pre-reqs



    - name: "Create config.xml for pfSense"
      template:
        src: config.xml.j2
        dest: "/tmp/config.xml"
      tags:
        - pre-reqs


    - name: "Copy config.xml to disk image"
      become: true
      shell: |
        modprobe nbd 
        qemu-nbd --connect /dev/nbd0 {{ playbook_dir }}/sources/{{ pfsense_archive_file.dest[:-3] | basename }}
        fdisk -l /dev/nbd0 
        mkdir /tmp/mnt
        mount /dev/nbd0p3 /tmp/mnt/
        rm -r /tmp/mnt/conf
        mkdir /tmp/mnt/conf
        cp /tmp/config.xml /tmp/mnt/conf/config.xml
        ls -lh /tmp/mnt/conf
        umount /tmp/mnt 
        qemu-nbd --disconnect /dev/nbd0

        exit 0
      register: in_memory_disk
      tags:
        - pre-reqs

    - name: "Display output: NBD disk modifier "
      debug:
        msg: "{{ in_memory_disk.stdout_lines }}"
      tags:
        - pre-reqs


    - name: Downlad terraform binary
      get_url:
        url: https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
        dest: /tmp/terraform_1.0.8_linux_amd64.zip
        mode: 0755
      register: terraform_zip_file
      tags:
        - pre-reqs

    - name: Create Terraform variables.tf file from template
      template:
        src: variables.tf.j2
        dest: "{{ playbook_dir }}/variables.tf"
      tags:
        - pre-reqs

    - name: Install terraform binary
      become: yes
      unarchive:
        src: "{{ item }}"
        dest: /tmp/
        copy: no
      with_items:
      - "{{ terraform_zip_file.dest }}"
      tags:
        - pre-reqs

    - debug: var=terraform_zip_file
  
    - name: Init Terraform
      shell: |
        cd {{ playbook_dir }};
        /tmp/terraform init    
      register: init
      tags:
        - pre-reqs

        
    - name: "Display output: Init Terraform"
      debug:
        msg: "{{ init.stdout_lines }}"
      tags:
        - pre-reqs


    - name: Create resources - Plan
      shell: |
        cd {{ playbook_dir }};
        /tmp/terraform workspace new tempworkspace
        /tmp/terraform workspace select tempworkspace
        /tmp/terraform plan -out=plan.tfplan -var 'ovs-datapath={{ switch_name }}';    
      register: create_plan
      tags:
        - deployment

    - name: "Display output: Create resources - Plan"
      debug:
        msg: "{{ create_plan.stderr_lines }}"
      tags:
        - deployment

    - name: Create resources
      shell: |
        cd {{ playbook_dir }};
        /tmp/terraform workspace select tempworkspace
        /tmp/terraform apply plan.tfplan    
      register: create
      tags:
        - deployment

    - name: "Display output: Create resources"
      debug:
        msg: "{{ create.stderr_lines }}"
      tags:
        - deployment

    - name: "Create venv for pfSense install script"
      shell: |
        python -m venv /tmp/venv

        exit 0
      tags:
        - post-deployment


    - name: Install pySerial 
      pip:
        name: pyserial
        virtualenv: /tmp/venv
      tags:
        - post-deployment

    - name: Lets take a nap [30s]
      shell: |
        sleep 30
      tags:
        - post-deployment

    - name: Run pfSense installer
      become: true
      shell: |
        sleep 20
        CONSOLE=`virsh ttyconsole {{ firewall_host }}`
        source /tmp/venv/bin/activate
        python {{ playbook_dir }}/scripts/pfsense.py $CONSOLE
        deactivate

        exit 0
      register: pfsense_installer
      tags:
        - post-deployment

    - name: "Display output: pfSense Installer"
      debug:
        msg: "{{ pfsense_installer.stdout_lines }}"
      tags:
        - post-deployment

    - name: "Second power-off for pfSense"
      become: true
      shell: |
        virsh detach-disk --domain {{ firewall_host }} --target vda --persistent --config --live
        virsh destroy {{ firewall_host }}
        virsh start {{ firewall_host }}

        exit 0
      register: firewall_lifecycle
      tags:
        - post-deployment

    - debug: var=firewall_lifecycle
      tags:
      - post-deployment