---
  - name: Installing OpenStack Cloud
    hosts: localhost
    connection: local 
    tasks:
    - name: Setup directory structure for Faucet
      file:
        path: "{{ faucet_controler_base }}/{{ item }}"
        state: directory
      with_items: 
        - config
        - logs

    - name: Create Faucet controll config from template
      template:
        src: faucet.yaml.j2
        dest: "{{ faucet_controler_base }}/config/faucet.yaml"
        
    - name: Create a data container for faucet
      docker_container:
        name: faucet_data
        image: busybox
        state: started
        recreate: yes 
        volumes:
          - "{{ faucet_controler_base }}/config:/etc/faucet"
          - "{{ faucet_controler_base }}/logs:/var/log/faucet"

    - name: Setup Faucet controller (inside docker container)
      docker_container:
        name: faucet
        image: faucet/faucet
        state: started
        recreate: yes
        exposed_ports:
          - 6653:6653
          - 9302:9302
        volumes_from:
          - faucet_data
             

    - name: Setup openvswitch data 
      become: true
      ansible.builtin.shell: |
        ovs-vsctl add-br {{ switch_name }} \
          -- set bridge {{ switch_name }} other-config:datapath-id=0000000000000001 \
          -- set-controller {{ switch_name }} tcp:127.0.0.1:6653 \
          -- set controller {{ switch_name }} connection-mode=out-of-band
         
        exit 0
         
    - name: Downlad terraform binary
      get_url:
        url: https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
        dest: /tmp/terraform_1.0.8_linux_amd64.zip
        mode: 0755
      register: terraform_zip_file

    - name: Create Terraform variables.tf file from template
      template:
        src: variables.tf.j2
        dest: "{{ playbook_dir }}/variables.tf"
        

    - name: Install terraform binary
      become: yes
      unarchive:
        src: "{{ item }}"
        dest: /usr/local/bin/
        copy: no
      with_items:
      - "{{ terraform_zip_file.dest }}"

    - debug: var=terraform_zip_file
  
    - name: Init Terraform
      shell: |
        cd {{ playbook_dir }};
        terraform init    
      register: init

    - name: "Display output: Init Terraform"
      debug:
        msg: "{{ init.stdout_lines }}"

    - name: Create resources - Plan
      shell: |
        cd {{ playbook_dir }};
        terraform workspace new tempworkspace
        terraform workspace select tempworkspace
        terraform plan -out=plan.tfplan -var 'ovs-datapath={{ switch_name }}';    
      register: create_plan

    - name: "Display output: Create resources - Plan"
      debug:
        msg: "{{ create_plan.stdout_lines }}"
        msg: "{{ create_plan.stderr_lines }}"

    - name: Create resources
      shell: |
        cd {{ playbook_dir }};
        terraform workspace select tempworkspace
        terraform apply plan.tfplan    
      register: create

    - name: "Display output: Create resources"
      debug:
        msg: "{{ create.stdout_lines }}"        
        msg: "{{ create.stderr_lines }}"